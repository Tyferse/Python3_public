# Структуры данных

# Введение в объекты и классы

"""
 Список – это один из примеров использования объектов и классов.
Когда мы назначаем некоторой переменной i значение,
скажем, целое число 5, это можно представить себе как создание объекта
(т.е. экземпляра) i класса (т.е. типа) int. Чтобы лучше понять это,
прочитайте help(int).

 Класс может также иметь методы, т.е. функции,
определённые для использования только применительно к данному классу.
Этот функционал будет доступен только когда имеется
объект данного класса. Например, Python предоставляет метод append
для класса list, который позволяет добавлять элемент к концу списка.
Так mylist.append('and item') добавит эту строку к списку mylist.
"""

# Это мой список покупок
shoplist = ['яблоки', 'манго', 'морковь', 'бананы']

print('Я должен сделать', len(shoplist), 'покупки.')
print('Покупки:', end=' ')

for item in shoplist:
    print(item, end=' ')

print('\nПервое, что мне нужно купить, это', shoplist[0])
olditem = shoplist[0]
del shoplist[0]
print('Я купил', olditem)
print('Теперь мой список покупок:', shoplist)
'''
 Обратите внимание на использование ключевого аргумента end 
в функции print, который показывает, 
что мы хотим закончить вывод пробелом вместо обычного перевода строки.

 Далее после совершения покупки мы хотим удалить её из списка. 
Это достигается применением оператора del. Мы указываем, 
какой элемент списка мы хотим удалить, и оператор del удаляет его. 
Мы указываем, что хотим удалить первый элемент списка,
и поэтому пишем «del shoplist[0]».
'''

# Кортеж

zoo = ('питон', 'слон', 'пингвин')  # помните, что скобки не обязательны
print('Количество животных в зоопарке -', len(zoo))
new_zoo = 'обезьяна', 'верблюд', zoo
print('Количество клеток в зоопарке -', len(new_zoo))
print('Все животные в новом зоопарке:', new_zoo)
print('Животные, привезённые из старого зоопарка:', new_zoo[2])
print('Последнее животное, привезённое из старого зоопарка -',\
      new_zoo[2][2])
print('Количество животных в новом зоопарке -',\
      len(new_zoo) - 1 + len(new_zoo[2]))

'''
 Скобки

 Хотя скобки и не являются обязательными, 
я предпочитаю всегда указывать их, чтобы было очевидно, 
что это кортеж, особенно в двусмысленных случаях. Например, 
print(1, 2,3) и print((1,2,3)) делают разные вещи: 
первое выражение выводит три числа, тогда как второе – кортеж, 
содержащий эти три числа.

 Кортеж, содержащий 0 или 1 элемент

 Пустой кортеж создаётся при помощи пустой пары скобок – «myempty = ()». 
Однако, с кортежем из одного элемента не всё так просто. 
Его нужно указывать при помощи запятой после первого (и единственного)
элемента, чтобы Python мог отличить кортеж от скобок, 
окружающих объект в выражении. Таким образом, чтобы получить кортеж,
содержащий элемент 2, вам потребуется указать «singleton = (2,)».
'''

# Словарь

# 'ab' - сокращение от 'a'ddress 'b'ook
ab = {'Swaroop': 'swaroop@swaroopch.com',
      'Larry': 'larry@wall.org',
      'Matsumoto': 'matz@ruby-lang.org',
      'Spammer': 'spammer@hotmail.com'
      }
print("Адрес Swaroop'а:", ab['Swaroop'])

# Удаление пары ключ-значение
del ab['Spammer']

for name, address in ab.items():
    print('Контакт {0} с адресом {1}'.format(name, address))

# Последовательности

'''
 Основные возможности – это проверка принадлежности 
(т.е. выражения «in» и «not in») и оператор индексирования, 
позволяющий получить напрямую некоторый элемент последовательности.

 Все три типа последовательностей, упоминавшиеся выше 
(списки, кортежи и строки), также предоставляют операцию 
получения вырезки, которая позволяет получить 
вырезку последовательности, т.е. её фрагмент.
'''

# Множество

'''
 Множества – это неупорядоченные наборы простых объектов. 
Они необходимы тогда, когда присутствие объекта в наборе 
важнее порядка или того, сколько раз данный объект там встречается.

 Используя множества, можно осуществлять проверку принадлежности, 
определять, является ли данное множество 
подмножеством другого множества, 
находить пересечения множеств и так далее.
'''

bri = {'Бразилия', 'Россия', 'Индия'}
print('Индия' in bri)  # True
print('США' in bri)  # False

bric = bri.copy()
bric.add('Китай')
print(bric.issuperset(bri))  # True
bri.remove('Россия')
print(bri & bric)  # OR bri.intersection(bric)

# Ссылки

'''
 Когда мы создаём объект и присваиваем его переменной, 
переменная только ссылается на объект, 
а не представляет собой этот объект! 
То есть имя переменной указывает на ту часть памяти компьютера,
где хранится объект. Это называется привязкой имени к объекту.
'''

print('Простое присваивание')
shoplist2 = ['яблоки', 'манго', 'морковь', 'бананы']
mylist2 = shoplist2  # mylist - лишь ещё одно имя,
#                      указывающее на тот же объект!
del shoplist[0]  # Я сделал первую покупку, поэтому удаляю её из списка
print('shoplist2:', shoplist2)
print('mylist2:', mylist2)
# Обратите внимание, что и shoplist,
# и mylist выводят один и тот же список без пункта "яблоко",
# подтверждая тем самым, что они указывают на один объект.

print('Копирование при помощи полной вырезки')
mylist2 = shoplist2[:]  # создаём копию путём полной вырезки
del mylist2[0]  # удаляем первый элемент
print('shoplist2:', shoplist2)
print('mylist2:', mylist2)
# Обратите внимание, что теперь списки разные

'''
 Помните, что если вам нужно сделать копию списка 
или подобной последовательности, или другого сложного объекта 
(не такого простого объекта, как целое число), 
вам следует воспользоваться операцией вырезки. 
Если вы просто присвоите имя переменной другому имени,
оба они будут ссылаться на один и тот же объект, 
а это может привести к проблемам, если вы не осторожны.
'''
