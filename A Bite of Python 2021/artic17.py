# Стандартная библиотека

# Модуль sys

import sys, warnings


if sys.version_info[0] < 3:
    warnings.warn("Для выполнения этой программы необходима \
    как минимум версия Python 3.0",
                  RuntimeWarning)
else:
    print('Нормальное продолжение')

'''
 Мы используем один из модулей стандартной библиотеки, 
который называется warnings и служит для отображения 
предупреждений пользователю. Если версия Python менее 3, 
мы показываем соответствующее предупреждение.
'''

# Модуль logging

'''
 Представьте ситуацию, когда необходимо сохранить 
некоторые отладочные или другие важные сообщения где-нибудь, 
чтобы иметь возможность позже проверить, отработала ли программа,
как ожидалось. Как мы «сохраним где-нибудь» эти сообщения? 
Сделать это можно при помощи модуля logging.
'''

import os, platform, logging


if platform.platform().startswith('Windows'):
    logging_file = os.path.join(os.getenv('HOMEDRIVE'),
                                os.getenv('HOMEPATH'),
                                'test.log')
else:
    logging_file = os.path.join(os.getenv('HOME'), 'test.log')

print("Сохраняем лог в", logging_file)

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s : %(levelname)s : %(message)s',
                    filename=logging_file,
                    filemode='w', )

logging.debug("Начало программы")
logging.info("Какие-то действия")
logging.warning("Программа умирает")


'''
 Мы использовали три модуля из стандартной библиотеки:
модуль os для взаимодействия с операционной системой, 
модуль platform для получения информации о платформе 
(т.е. операционной системе) и модуль logging длясохранения лога.
(log – англ. «журнал», «вести журнал»).

 Прежде всего, при помощи строки, возвращаемой функцией 
platform.platform() мы проверяем, 
какая операционная система используется 
(для более подробной информации см. import platform; help(platform)).
Если это Windows, то мы определяем диск, содержащий домашний каталог, 
путь к домашнему каталогу на нём и имя файла,
в котором хотим сохранить информацию. Сложив все эти три части, 
мы получаем полный путь к файлу. 
Для других платформ нам нужно знать только путь 
к домашнему каталогу пользователя, и мы получим полный путь к файлу.

 При помощи функции os.path.join() мы объединяем три части пути 
к файлу вместе. Мы используем эту функцию 
вместо простого объединения строк для того, чтобы гарантировать, 
что полный путь к файлу записан в формате, 
ожидаемом операционной системой.

 Далее мы конфигурируем модуль logging таким образом, 
чтобы он записывал все сообщения 
в определённом формате в указанный файл.

 Наконец, мы можем выводить сообщения, предназначенные для отладки, 
информирования, предупреждения и даже критические сообщения. 
После выполнения программы можно просмотреть этот файл и узнать, 
что происходило в программе, хотя пользователю, запустившему программу, 
ничего не было показано.
'''
