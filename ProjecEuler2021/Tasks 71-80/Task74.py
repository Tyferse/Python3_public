"""
 Число 145 известно благодаря такому свойству,
что сумма факториалов его цифр равна 145:

  1! + 4! + 5! = 1 + 24 + 120 = 145

 Возможно, менее известно число 169 -
оно создает самую длинную цепочку чисел, которая возвращается к 169.
Оказывается, существует только три таких замкнутых цепи:

  169 → 363601 → 1454 → 169
  871 → 45361 → 871
  872 → 45362 → 872

 Нетрудно показать, что ЛЮБОЕ начальное число рано или поздно
приведет к замыканию цепи. Например,

  69 → 363600 → 1454 → 169 → 363601 (→ 1454)
  78 → 45360 → 871 → 45361 (→ 871)
  540 → 145 (→ 145)

 Начав с 69, мы получим цепь из пяти неповторяющхися членов,
но самая длинная цепь, начинающаяся с числа меньше миллиона,
имеет шестьдесят неповторяющихся членов.

 Сколько существует цепей, начинающихся с числа меньше миллиона,
содержащих ровно шестьдесят неповторяющихся членов?
"""

import math

# Список факториалов цифр
FACTORIAL = [math.factorial(i) for i in range(10)]


def factorialize(n):
    """
    Возвращает сумму факториалов цифр.
    Returns a sum of factorials of digits.
    """
    result = 0
    while n != 0:
        result += FACTORIAL[n % 10]
        n //= 10
        
    return result


def get_chain_length(n):
    """
    Возвращает длину цепи сумм факториалов цифр.
    Returns a length of chain of sums of digits factorials.
    """
    seen = set()

    while True:
        seen.add(n)
        n = factorialize(n)
        if n in seen:
            return len(seen)


# Счёт количества нужных чисел меньше миллиона
ans = sum(1 for i in range(1, 10 ** 6) if get_chain_length(i) == 60)

print(ans)
