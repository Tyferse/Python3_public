"""
 Оказывается, что 12 см - наименьшая длина проволоки, сгибая которую,
можно получить прямоугольный треугольник с целыми сторонами,
притом лишь единственным способом. Есть и другие примеры.

  12 см: (3,4,5)
  24 см: (6,8,10)
  30 см: (5,12,13)
  36 см: (9,12,15)
  40 см: (8,15,17)
  48 см: (12,16,20)

 В противоположность этим примерам, существуют такие длины проволоки
(к примеру, 20 см), из которых нельзя получить
прямоугольный треугольник с целыми сторонами.
Другие же длины позволяют найти несколько возможных решений:
к примеру, сгибая проволоку длинной 120 см,
можно получить ровно три различных прямоугольных треугольника
с целыми сторонами.

  120 см: (30,40,50), (20,48,52), (24,45,51)

 Известно, что длина проволоки составляет L.
Для скольких значений L ≤ 1 500 000, сгибая проволоку,
можно получить ровно один прямоугольный треугольник с целыми сторонами?

 Примечание: Эта задача была недавно изменена.
Убедитесь в том, что вы используете правильные параметры.
"""

import math


def compute():
    """
    Теорема о тройках Пифагора:
      Каждая примитивная Пифагорова тройка с a нечётным и b чётным
      может быть представлена как a = st, b = (s^2-t^2)/2,
      c = (s^2+t^2)/2, где s > t > 0 - взаимно простые нечётные
      целые числа.
    """
    LIMIT = 1500000
    #
    # Pythagorean triples theorem:
    #   Every primitive Pythagorean triple with a odd and b
    #   even can be expressed as a = st, b = (s^2-t^2)/2,
    #   c = (s^2+t^2)/2, where s > t > 0 are coprime odd integers.
    triples = set()
    for s in range(3, int(math.sqrt(LIMIT)) + 1, 2):
        for t in range(s - 2, 0, -2):
            if math.gcd(s, t) == 1:
                a = s * t
                b = (s * s - t * t) // 2
                c = (s * s + t * t) // 2
                if a + b + c <= LIMIT:
                    triples.add((a, b, c))

    ways = [0] * (LIMIT + 1)
    for triple in triples:
        sigma = sum(triple)
        for i in range(sigma, len(ways), sigma):
            ways[i] += 1

    ans = ways.count(1)
    return str(ans)


if __name__ == "__main__":
    print(compute())
