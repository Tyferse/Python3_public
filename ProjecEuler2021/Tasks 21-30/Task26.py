"""
 Единичная дробь имеет 1 в числителе.
Десятичные представления единичных дробей
со знаменателями от 2 до 10 даны ниже:

  1/2	=	0.5
  1/3	=	0.(3)
  1/4	=	0.25
  1/5	=	0.2
  1/6	=	0.1(6)
  1/7	=	0.(142857)
  1/8	=	0.125
  1/9	=	0.(1)
  1/10	=	0.1

 Где 0.1(6) значит 0.166666...,
и имеет повторяющуюся последовательность из одной цифры.
Заметим, что 1/7 имеет повторяющуюся последовательность из 6 цифр.

 Найдите значение d < 1000, для которого 1/d в десятичном виде
содержит самую длинную повторяющуюся последовательность цифр.
"""


def gen():
    for denominator in range(2, 1001):
        before = []
        numerator = 1
        while not before.count(numerator):
            before.append(numerator)
            numerator = 10 * numerator % denominator
            
        yield len(before) - before.index(numerator), denominator


print('знаменатель = {1}, период = {0}'.format(*max(gen())))

"""
 Yield – ключевое слово, которое используется вместо return. 
С его помощью функция возвращает значение 
без уничтожения локальных переменных, кроме того, 
при каждом последующем вызове функция начинает 
своё выполнение с оператора yield.

 Функция, содержащая yield в Python 3, называется генератором. 
Чтобы разобраться, как работает yield и зачем его используют, 
необходимо узнать, что такое генераторы, итераторы и итерации.

 Но перед этим рассмотрим пример:

def numbers_range(n):
    for i in range(n):
        yield i
        
        
a = numbers_range(4)
print(type(a))
for b in a:
    print(b)
    
# Выведено в консоль будет:
<class 'generator'>
0
1
2
3

 Тип полученного значения при вызове функции — это генератор.
Один из способов получения значений из генератора — 
это их перебрать в цикле for. Им мы и воспользовались.

 Итератор — это объект, позволяющий «обходить» 
элементы последовательностей. Программист может создать свой итератор, 
однако в этом нет необходимости, интерпретатор Python делает это сам.

 Генератор — это обычная функция,
которая при каждом своём вызове возвращает объект. 
При этом в функции-генераторе вызывается next.

 Отличие генераторов от обычной функции состоит в том, 
что функция возвращает только одно значение 
с помощью ключевого слова return, 
а генератор возвращает новый объект при каждом вызове с помощью yield.
По сути генератор ведет себя как итератор,
что позволяет использовать его в цикле for.

 Программист может не использовать генераторы, 
однако в некоторых ситуациях оптимизировать программу 
можно только с их помощью.
"""
