"""
 Начиная с 1 и продвигаясь по спирали в направлении
против часовой стрелки, получается квадратная спираль с длиной стороны 7

  37- 36  35 34 33 32  31-
  38  17- 16 15 14 13- 30
  39  18  5- 4  3- 12  29
  40  19  6  1  2  11  28
  41  20  7- 8  9  10  27
  42  21  22 23 24 25  26
  43- 44  45 46 47 48  49

 Интересно заметить, что нечетные квадраты лежат
на правой нижней полудиагонали. Еще интереснее то, что среди 13 чисел,
лежащих на обеих диагоналях, 8 являются простыми;
т.е. отношение составляет 8/13 ≈ 62%.

 Если добавить еще один целый слой вокруг изображенной выше спирали,
получится квадратная спираль с длиной стороны 9.
Если продолжать данный процесс,
какой будет длина стороны квадратной спирали,
у которой отношение количества простых чисел
к количеству всех чисел на обеих диагоналях упадет ниже 10%?
"""

import eulerlib
import itertools

# список значений углов
corners = []
prime_corners = []

# Перебирание всех сторон спирали
for x in itertools.count(2, 3):
    m = 1
    # Добавление углов
    for n in range(4):
        if n == 0:
            corners.append(x * x)
        elif n > 0:
            corners.append(x * x - x * n + m)
            m += 1
            
    # Количество простых чисел в диагоналях
    prime_corners = sum(1 for i in corners if eulerlib.is_prime(i))
    if prime_corners / len(corners) < 0.1:
        print(x)
        break
