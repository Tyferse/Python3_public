load "ppm2rnm" 
load "isoline"


ifstream fileListIn("flist.txt");
string fileName;
int n;
fileListIn >> n;

real hsize= 5; // mesh sir in pixel ..
real[int,int] Curves(4,3);
int[int] be(1);
int nc; // nb of curve

// код переменных для моделирования
real sigma = 0.03, alpha = 2.2e-3, beta = 2.4e-3, a=39, b=9.2, 
     psiH = 3.6e-2, mu0 = 0.08, r=2.73;
real gamma = 1000*alpha, delta = 1000*beta, 
     phi0 = 6, theta0 = 0.04, kappa = sigma / (1 - sigma);
real kk = 2./115, tau = 1./30; // шаг по времени

// cout << Curves << endl;
for (int i = 0; i < n; i++) {
    fileListIn >> fileName;

    // 6425     1143
    if (i < 1) continue;
    // fileListIn >> fileName;
    // cout << fileName << endl;
    {
        real[int,int] ff1(fileName); // read image (figure 5.40)
        // and set to an rect. array
        int nx = ff1.n, ny=ff1.m; // grey value between 0 to 1 (dark)
        // build a Cartesian mesh such that the origin is qt the right place
        // cout << nx << " " << ny << endl;
        mesh Th = square(nx-1,ny-1,[(nx-1)*(x), (ny-1)*(1-y)]);
        // warning the numbering is of the vertices (x,y) is
        // given by i = x/nx + nx ∗ y/ny
        fespace Vh(Th,P1);
        Vh f1; 
        f1[] = ff1; // transforme array in finite element function.
        nc = isoline(Th, f1, iso=0.25, close=0, Curves, beginend=be, smoothing=.25, ratio=.5);
    }

    // the longest isoline : the lac ..
    // cout << "be= " << be(0.999009) << endl;
    int ic0 = be(0), ic1 = be(1) - 1;
    // cout << ic0 << " " << ic1 << endl;

    // plot([Curves(0,ic0:ic1), Curves(1,ic0:ic1)], wait=1);
    int NC = Curves(2, ic1);
    // cout << NC << endl;
    // for (real p = 0.; p <= 1.; p += 0.001)
    //     cout << Curve(Curves, ic0, ic1, p) << endl;
    // cout << Curve(Curves, ic0, ic1, 1) << endl;

    real xl = Curves(0, ic0:ic1).max - 5;
    real yl = Curves(1, ic0:ic1).min + 5;
    // cout << xl << " " << yl << endl;
    border G(t=0,1) {P = Curve(Curves, ic0, ic1, t); label = 1 + (x > xl)*2 + (y < yl);}
    // plot(G(-NC), wait=1);
    
    try {
        mesh Th = buildmesh(G(NC / 4));

        fespace Vh(Th, P1);
        Vh vel1, vel2, p, u1, u2, q, phi, theta, v, mu, psi, phiPrev, thetaPrev, theta50, phiB, thetaB;
        phiPrev = phi0; 
        thetaPrev = theta0;
        theta = theta0;

        // vel2 = 0.2;
        theta50 = 5e-5;

        phiB = 9.2;
        thetaB = 0.9;
        // vel1 = 0;
        // vel2 = 0.6;

        Vh phiD, thetaD;
        // Вычисления
        solve Stokes(vel1, vel2, p, u1, u2, q) = int2d(Th)(
            dx(vel1)*dx(u1) + dy(vel1)*dy(u1)) 
            + int2d(Th)(dx(vel2)*dx(u2) + dy(vel2)*dy(u2)) 
            + int2d(Th)(
                - dx(u1)*p - dy(u2)*p
                - p*q*0.000001
                - dx(vel1)*q - dy(vel2)*q) 
            + on(1, 2, vel1=0., vel2=4.8) + on(3, 4, vel1=-4.8, vel2=0.);

        psi = kk*phi;
        solve Poisson1(phi, v) = int2d(Th)(phi*v) - int2d(Th)(phiPrev*v) 
                                + int2d(Th)(tau*alpha*(dx(phi)*dx(v) + dy(phi)*dy(v)))

                                + int1d(Th, 1, 2)(tau*gamma*phi*v) 
                                - int1d(Th, 1, 2)(tau*gamma*16.4*v)

                                + int1d(Th, 3)(tau*gamma*phi*v) 
                                - int1d(Th, 3)(tau*gamma*18.4*v)

                                + int1d(Th, 4)(tau*gamma*phi*v) 
                                - int1d(Th, 4)(tau*gamma*16.4*v)

                                - int2d(Th)(tau*alpha*theta*v)
                                + int2d(Th)(tau*alpha*psi*v)
                                + int2d(Th)(tau*dx(phi)*v*vel1)
                                + int2d(Th)(tau*dy(phi)*v*vel2);
        phi = 4*(phi < 4) + 9.2*(phi > 9.2) + phi*(4 <= phi)*(phi <= 9.2);
        phiPrev = phi;

        // phiD = (x < 0.05)*(y > 1.35)*4 + (x > 1.35)*(y > 1.35)*10 + phi*(y <= 1.35) + phi*(y >= 1.35)*(x >= 0.05)*(x <= 1.35);

        mu = mu0*thetaPrev/(thetaPrev + theta50);
        psi = kk*phi;
        solve Poisson2(theta, v) = int2d(Th)(theta*v) - int2d(Th)(thetaPrev*v)
                                    + int2d(Th)(tau*beta*dx(theta)*dx(v))

                                    + int1d(Th, 1, 2)(tau*delta*theta*v)
                                    - int1d(Th, 1, 2)(tau*delta*kk*16.4*v)

                                    + int1d(Th, 3)(tau*delta*theta*v)
                                    - int1d(Th, 3)(tau*delta*kk*18.4*v)

                                    + int1d(Th, 4)(tau*delta*theta*v)
                                    - int1d(Th, 4)(tau*delta*kk*16.4*v)

                                    + int2d(Th)(tau*beta*dy(theta)*dy(v))
                                    + int2d(Th)(tau*kappa*a*theta*v)
                                    - int2d(Th)(tau*kappa*a*psi*v)
                                    + int2d(Th)(tau*mu*v);

        theta = 0.01*(theta < 0.01) + 0.16*(theta > 0.16) + theta*(0.01 <= theta)*(theta <= 0.16);
        thetaPrev = theta;

        // thetaD = (x < 0.02)*(y > 1.38)*0.001 + (x > 1.38)*(y > 1.38)*0.16 + theta*(y <= 1.38) + theta*(y >= 1.38)*(x >= 0.02)*(x <= 1.38);

        plot(phi, wait=(i==0), fill=true, ps="meshframes/" + fileName(8:fileName.length - 5) + ".eps");
        // savemesh(Th, "meshframes/" + fileName(8:fileName.length - 5) + ".mesh");
    }
    catch (...) {
        continue;
    }

    // plot(Th, wait=0);
    // cout << " Th.area = " << Th.area << endl;
    // plot(Th,wait=1);
}
