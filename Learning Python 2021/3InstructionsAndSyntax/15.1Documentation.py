"""
 Документация


 Источники документации в языке Python

 К настоящему моменту вы уже наверняка начинаете понимать, что Python
изначально включает в себя удивительно широкие функциональные
возможности – встроенные функции и исключения, предопределенные атрибуты
и методы объектов, модули стандартной библиотеки и многое другое. Более
того, на самом деле мы лишь слегка коснулись каждой из этих категорий.

 Один из первых вопросов, который часто задают удивленные новички:
«Как мне найти информацию обо всех встроенных возможностях?» Этот раздел
рассказывает о различных источниках документации, доступных в языке
Python. Здесь также будут представлены строки документирования
(docstrings) сисистема PyDoc, которая использует их. Эти темы мало
связаны с самим языком программирования, но они будут иметь большое
значение, как только вы подойдете к примерам и упражнениям
в этой части книги.

 Как показано в табл. 15.1, существует множество мест, где можно
отыскать информацию о Python, и объем этой информации все увеличивается.
Поскольку документация играет важную роль в практическом
программировании, мы исследуем каждую из этих категорий в следующих
разделах.

  Форма                             Назначение
  Комментарии #                     Документация внутри файла

  Функция dir                       Получение списка атрибутов объектов

  Строки документирования: __doc__  Документация внутри файла,
                                    присоединяемая к объектам

  PyDoc: функция help               Интерактивная справка по объектам

  PyDoc: отчеты в формате HTML      Документация к модулям для просмотра
                                    в броузере

  Стандартный набор руководств      Официальное описание языка
                                    и библиотеки

  Веб-ресурсы                       Интерактивные учебные руководства,
                                    примеры и так далее

  Печатные издания                  Руководства, распространяемые
                                    на коммерческой основе


 Комментарии #

 Комментарии, начинающиеся с символа решетки, представляют собой самый
элементарный способ документирования программного кода. Интерпретатор
просто игнорирует весь текст, который следует за символом #
(при условии, что он находится не внутри строкового литерала), поэтому
вы можете помещать вслед за этими символами слова и описания,
предназначенные для программистов. Впрочем, такие комментарии доступны
только в файлах с исходными текстами – для записи комментариев, которые
будут доступны более широко, следует использовать строки
документирования.

 В настоящее время считается, что строки документирования лучше подходят
для создания функционального описания (например, «мой файл делает то-то
и то-то»), а комментарии, начинающиеся с символа #, лучше подходят для
описания некоторых особенностей программного кода (например, «это
странное выражение делает то-то и то-то»). О строках документирования
мы поговорим чуть ниже.


 Функция dir

 Функция dir – это простой способ получить список всех атрибутов объекта
(то есть методов и элементов данных). Она может быть вызвана для любого
объекта, который имеет атрибуты. Например, чтобы узнать, что имеется
в стандартном библиотечном модуле sys, просто импортируйте его
и передайте имя модуля функции dir (следующие результаты получены
в Python 3.0, в версии Python 2.6 они немного отличаются):
\>>> import sys
\>>> dir(sys)
[‘__displayhook__’, ‘__doc__’, ‘__excepthook__’, ‘__name__’,
 ‘__package__’, ‘__stderr__’, ‘__stdin__’, ‘__stdout__’,
 ‘_clear_type_cache’, ‘_current_frames’, ‘_getframe’, ‘api_version’,
 ‘argv’, ‘builtin_module_names’, ‘byteorder’, ‘call_tracing’,
 ‘callstats’, ‘copyright’, ‘displayhook’, ‘dllhandle’,
 ‘dont_write_bytecode’, ‘exc_info’, ‘excepthook’, ‘exec_prefix’,
 ‘executable’, ‘exit’, ‘flags’, ‘float_info’, ‘getcheckinterval’,
 ‘getdefaultencoding’, ...остальные имена опущены...]

 Здесь показаны только некоторые из имен; чтобы получить полный список,
выполните эти инструкции на своей машине.

 Чтобы узнать, какие атрибуты содержат объекты встроенных типов,
передайте функции dir литерал (или существующий объект) требуемого типа.
Например, чтобы увидеть атрибуты списков и строк, можно передать функции
пустой объект:

\>>> dir([])
[‘__add__’, ‘__class__’, ...остальные имена опущены... ‘append’,
 ‘count’, ‘extend’, ‘index’, ‘insert’, ‘pop’, ‘remove’, ‘reverse’,
 ‘sort’]

\>>> dir(‘’)
[‘__add__’, ‘__class__’, ‘__contains__’, ...остальные имена опущены...
 ‘capitalize’, ‘center’, ‘count’, ‘encode’, ‘endswith’, ‘expandtabs’,
 ‘find’, ‘format’, ‘index’, ‘isalnum’, ‘isalpha’, ‘isdecimal’,
 ‘isdigit’, ‘isidentifier’, ‘islower’, ‘isnumeric’, ‘isprintable’,
 ‘isspace’, ‘istitle’, ‘isupper’, ‘join’, ‘ljust’, ‘lower’, ‘lstrip’,
 ‘maketrans’, ‘partition’, ‘replace’, ‘rfind’, ‘rindex’, ‘rjust’,
 ...остальные имена опущены...]

 Результаты работы функции dir для любого встроенного типа включают
набор атрибутов, которые имеют отношение к реализации этого типа
(методы перегруженных операторов); все они начинаются и заканчиваются
двумя символами подчеркивания, чтобы сделать их отличными от обычных
имен, и вы можете пока просто игнорировать их.

 Того же эффекта можно добиться, передав функции dir имя типа вместо
литерала:

\>>> dir(str) == dir(‘’)  # Результат тот же, что и в предыдущем примере
True
\>>> dir(list) == dir([])
True

 Такой прием работает по той простой причине, что имена функций
преобразования, такие как str и list, в языке Python фактически являются
именами типов – вызов любого из этих конструкторов приводит к созданию
экземпляра этого типа. Подробнее о конструкторах и о перегрузке
операторов мы будем говорить в шестой части книги, когда будем обсуждать
классы.

 Функция dir служит своего рода «кратким напоминанием» – она
предоставляет список имен атрибутов, но ничего не сообщает о том,
что эти имена означают. За этой информацией необходимо обращаться
к следующему источнику документации.


 Строки документирования: __doc__

 Помимо комментариев, начинающихся с символа #, язык Python поддерживает
возможность создания документации, которая автоматически присоединяется
к объектам и доступна во время выполнения. Синтаксически такие строки
располагаются в начале файлов модулей, функций и классов, перед
исполняемым программным кодом (перед ними вполне могут располагаться
комментарии #). Интерпретатор автоматически помещает строки
документирования в атрибут __doc__ соответствующего объекта.


 Строки документирования, определяемые пользователем

 В качестве примера рассмотрим следующий файл – docstrings.py. Строки
документирования в нем располагаются в самом начале файла, а также
в начале функции и класса. Здесь для создания многострочных описаний
файла и функции я использовал строки в тройных кавычках, но допускается
использовать строки любого типа. Мы еще не познакомились с инструкциями
def и class, поэтому вы можете просто игнорировать все, что находится
после них, за исключением строк в самом начале:

“””
Module documentation
Words Go Here
“””

spam = 40

def square(x):
    “””
    function documentation
    can we have your liver then?
    “””
    return x **2

class Employee:
    “class documentation”
    pass

print(square(4))
print(square.__doc__)

 Самое важное в протоколе документирования заключается в том, что ваши
комментарии становятся доступны для просмотра в виде атрибутов __doc__
после того, как файл будет импортирован. Поэтому, чтобы отобразить
строки документирования, связанные с модулем и его объектами, достаточно
просто импортировать файл и вывести значения их атрибутов __doc__,
где интерпретатор сохраняет текст:

\>>> import docstrings
16
    function documentation
    can we have your liver then?

\>>> print(docstrings.__doc__)
Module documentation
Words Go Here

\>>> print(docstrings.square.__doc__)
    function documentation
    can we have your liver then?

\>>> print(docstrings.employee.__doc__)
    class documentation

 Обратите внимание, что для вывода строк документирования необходимо
явно использовать функцию print, в противном случае будет выводиться
единственная строка со встроенными символами новой строки.

 Кроме того, существует возможность присоединять строки документирования
к методам классов (эта возможность описывается ниже), но так как они
представлены инструкциями def, вложенными в классы, это не является
особым случаем. Чтобы извлечь строку с описанием метода класса,
определяемого внутри модуля, необходимо указать имя модуля, класса
и метода: module.class, method.__doc__ (примеры строк документирования
методов приводятся в главе 28).


 Стандарты оформления строк документирования

 Не существует какого-то общепринятого стандарта, который
регламентировал бы, что должно входить в строки документирования
(хотя в некоторых компаниях существуют свои внутренние стандарты).
В свое время предлагались различные шаблоны и языки разметки (например,
HTML или XML), но они не завоевали популярность в мире Python.
И, положа руку на сердце, едва ли мы дождемся появления программистов,
которые захотят писать документацию на языке разметки HTML!

 Вообще, среди программистов документация обычно отходит на задний план.
Если вы увидите хоть какие-то комментарии в файле, считайте, что вам
повезло. Однако я настоятельно рекомендую тщательно документировать свой
программный код – это действительно очень важная часть хорошо
написанного программного кода. Замечу, что нет никаких стандартов
на структуру строк документирования, поэтому, если вы хотите
использовать их, чувствуйте себя свободными.


 Встроенные строки документирования

 Как оказывается, во встроенных модулях и объектах языка Python
используется сходная методика присоединения документации – до и после
списка атрибутов, возвращаемых функцией dir. Например, чтобы увидеть
удобочитаемое описание встроенного модуля, его надо импортировать
и вывести строку __doc__:

\>>> import sys
\>>> print(sys.__doc__)
This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with
the interpreter.

Dynamic objects:

argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ‘’
modules -- dictionary of loaded modules
...остальной текст опущен...

 Описание функций, классов и методов внутри встроенных модулей
присоединено к их атрибутам __doc__:

>>> import sys
>>> print(sys.getrefcount.__doc__)
getrefcount(object) -> integer

Return the reference count of object. The count returned is generally
one higher than you might expect, because it includes the (temporary)
...остальной текст опущен...

 Кроме того, можно прочитать описание встроенных функций, находящееся
в их строках документирования:

>>> print(int.__doc__)
int(x[, base]) -> integer

Convert a string or number to an integer, if possible. A floating
point argument will be truncated towards zero (this does not include a
...остальной текст опущен...

>>> print(map.__doc__)
map(func, *iterables) --> map object

Make an iterator that computes the function using arguments from
each of the iterables. Stops when the shortest iterable is exhausted.

 Просматривая таким способом строки документирования встроенных
инструментов, вы можете получить богатый объем информации, однако вам
не требуется этого делать – эту информацию функция help, тема следующего
раздела, предоставляет вам автоматически.


 PyDoc: функция help

 Методика использования строк документирования оказалась настолько
удобной, что теперь в состав Python� входит инструмент, который
упрощает их отображение. Стандартный инструмент PyDoc написан на языке
Python, он умеет извлекать строки документирования вместе с информацией
о структуре программных компонентов и формировать из них удобно
отформатированные отчеты различных типов. Существуют также
дополнительные, свободно распространяемые программные инструменты,
позволяющие извлекать и форматировать строки документирования
(включая инструменты, обеспечивающие поддержку разметки типа
«structured text», – дополнительную информацию ищите в Сети), однако
Python распространяется вместе с пакетом PyDoc, содержащимся
в стандартной библиотеке.

 Существуют различные способы запуска PyDoc, включая сценарий командной
строки (за дополнительной информацией обращайтесь к руководству
по библиотеке Python). Два, пожалуй, самых заметных интерфейса к PyDoc –
это встроенная функция help и графический интерфейс к PyDoc
для воспроизводства отчетов в формате HTML. Функция help вызывает PyDoc
для создания простых текстовых отчетов (которые выглядят как страницы
руководства в UNIX-подобных системах):

\>>> import sys
\>>> help(sys.getrefcount)
Help on built-in function getrefcount:

getrefcount(...)
    getrefcount(object) -> integer

    Return the reference count of object. The count returned
    is generally
    one higher than you might expect, because it includes the
    (temporary)
    ...остальной текст опущен...

 Обратите внимание: чтобы вызывать функцию help, не обязательно
импортировать модуль sys, но его необходимо импортировать, чтобы
получить справку по модулю sys, – функция ожидает получить ссылку
на объект. Для крупных объектов, таких как модули и классы, функция help
делит выводимую информацию на множество разделов, часть из которых
показана здесь. Запустите следующую команду в интерактивном сеансе,
чтобы получить полный отчет:

>>> help(sys)
Help on built-in module sys:

NAME
    sys

FILE
    (built-in)

MODULE DOCS
    http://docs.python.org/library/sys

DESCRIPTION
    This module provides access to some objects used or maintained by
    the interpreter and to functions that interact strongly with the
    interpreter. ...остальной текст опущен...

FUNCTIONS
    __displayhook__ = displayhook(...)
        displayhook(object) -> None
        Print an object to sys.stdout and also save it in builtins.
        ...остальной текст опущен...

DATA
    __stderr__ = <io.TextIOWrapper object at 0x0236E950>
    __stdin__ = <io.TextIOWrapper object at 0x02366550>
    __stdout__ = <io.TextIOWrapper object at 0x02366E30>
    ...остальной текст опущен...

 Часть информации в этом отчете извлечена из строк документирования,
а часть этих сведений (например, сигнатуры функций) – это информация
о структуре программных компонентов, которую PyDoc извлекает
автоматически, в результате анализа внутреннего устройства объектов.
Кроме того, функция help может использоваться для получения сведений
о встроенных функциях, методах и типах. Чтобы получить справку
о встроенном типе, нужно просто передать функции имя типа (например,
dict – для словарей, str – для строк, list – для списков). Вам будет
предоставлен большой объем информации с описаниями всех методов,
доступных для этого типа:

\>>> help(dict)
Help on class dict in module builtins:

class dict(object)
 | dict() -> new empty dictionary.
 | dict(mapping) -> new dictionary initialized from a mapping object’s
 ...остальной текст опущен...

\>>> help(str.replace)
Help on method_descriptor:

replace(...)
    S.replace (old, new[, count]) -> str
    Return a copy of S with all occurrences of substring
    ...остальной текст опущен...

\>>> help(ord)
Help on built-in function ord in module builtins:

ord(...)
    ord(c) -> integer
    Return the integer ordinal of a one-character string.

 Наконец функция help может извлекать информацию не только
из встроенных, но и из любых других модулей. Ниже приводится отчет,
полученный для файла docstrings.py, представленного выше. Здесь снова
часть информации представлена строками документирования, а часть была
получена автоматически, в результате исследования структуры объектов:

\>>> import docstrings
\>>> help(docstrings.square)
Help on function square in module docstrings:

square(x)
    function documentation
    can we have your liver then?

\>>> help(docstrings.Employee)
Help on class Employee in module docstrings:

class Employee(builtins.object)
 | class documentation
 |
 | Data descriptors defined here:
 ...остальной текст опущен...

\>>> help(docstrings)
Help on module docstrings:

NAME
    docstrings

FILE
    c:\misc\docstrings.py

DESCRIPTION
    Module documentation
    Words Go Here

CLASSES
    builtins.object
        Employee
    class Employee(builtins.object)
     | class documentation
     |
     | Data descriptors defined here:
     ...остальной текст опущен...

 FUNCTIONS
    square(x)
        function documentation
        can we have your liver then?

DATA
    spam = 40


 PyDoc: отчеты в формате HTML

 Функция help прекрасно подходит для извлечения информации при работе
в интерактивной оболочке. Однако для PyDoc существует и графический
интерфейс (простой и переносимый сценарий Python/tkinter), с помощью
которого можно создавать отчеты в формате HTML, доступные для просмотра
в любом веб-броузере. В этом случае PyDoc может выполняться как
локально, так и удаленно, в режиме клиент/сервер. Внутри отчетов
автоматически создаются гиперссылки, которые позволят щелчком мыши
перемещаться к описаниям взаимосвязанных компонентов в вашем приложении.

 Чтобы запустить PyDoc в этом режиме, сначала необходимо запустить
поисковый механизм, графический интерфейс которого представлен на рис.
Сделать это можно, выбрав пункт меню Module Docs (Документация
к модулям) в меню Python кнопки Пуск в Windows или запустив сценарий
pydocgui.pyw в каталоге Tools/Scripts, где был установлен Python
(также можно запустить сценарий pydoc.py с ключом –g, находящийся
в подкаталоге Lib). Введите имя интересующего вас модуля и нажмите
клавишу Enter – PyDoc обойдет каталоги в пути поиска модулей (sys.path)
и отыщет ссылки на указанный модуль.

 Подобно функции help, графический интерфейс может извлекать информацию
и из пользовательских модулей.

 PyDoc можно настраивать и запускать разными способами, но мы не будем
рассматривать эти возможности здесь – за дополнительной информацией
обращайтесь к руководству по стандартной библиотеке языка Python.
Главное, что вы должны запомнить, – PyDoc по сути создает отчеты
о реализации на основе той информации, что имеется, – если
вы использовали строки документирования в своих файлах, PyDoc сделает
все необходимое, чтобы собрать и отформатировать их соответствующим
образом. PyDoc – это всего лишь средство получения справки об объектах,
таких как функции и модули, но он обеспечивает простой доступ
к документации с описанием этих компонентов. Его отчеты более полезны,
чем просто списки атрибутов, хотя и менее исчерпывающи,
чем стандартные руководства.

 Совет дня: если поле ввода имени модуля в окне на рис. 15.1 оставить
пустым и щелкнуть на кнопке «open browser» (открыть броузер), PyDoc
воспроизведет веб-страницу с гиперссылками на все модули, доступные для
импорта на данном компьютере. Сюда входят модули стандартной библиотеки,
расширения сторонних производителей, пользовательские модули,
расположенные в пути поиска импортируемых модулей, и даже модули,
написанные на языке C, скомпонованные статически или динамически.
Такую информацию сложно получить иными путями, если не писать свой
программный код, который будет заниматься исследованием исходных текстов
набора модулей.

 Кроме того, PyDoc может сохранять документацию в формате HTML
для последующего просмотра или вывода на печать; указания о том, как это
сделать, вы найдете в документации. Следует отметить, что PyDoc может
не совсем корректно работать со сценариями, которые читают данные
из потока стандартного ввода, – PyDoc импортирует целевой модуль
для последующего исследования, но при работе в режиме с графическим
интерфейсом может отсутствовать связь с потоком стандартного ввода.
Однако модули, которые не требуют немедленного ввода информации
в момент импортирования, будут обслуживаться корректно.


 Стандартный набор руководств

 Стандартные руководства играют роль наиболее полного и самого свежего
описания языка Python и набора инструментальных средств. Руководства
распространяются в формате HTML и в других форматах и в Windows
устанавливаются вместе системой Python – они доступны в виде пунктов
подменю Python, в меню кнопки Пуск (Start), а также в меню Help
(Справка) среды разработки IDLE. Набор руководств можно как получить
отдельно, в различных форматах, по адресу http://www.python.org,
так и читать непосредственно на сайте (следуйте по ссылке Documentation
(документация)). Руководства в системе Windows оформлены в виде файлов
справки, поддерживающих возможность поиска; электронная версия на сайте
проекта Python также имеет страницу поиска.

 После открытия руководства в операционной системе Windows оно
отображает начальную страницу, как показано на рис. 15.4. Двумя самыми
важными, пожалуй, здесь являются ссылки Library Reference (справочное
руководство по библиотеке, где описываются встроенные типы, функции,
исключения и модули стандартной библиотеки) и Language Reference
(справочное руководство по языку, где приводится формальное описание
языковых конструкций). На этой странице имеется также ссылка Tutorial
(самоучитель), которая ведет к краткому введению для начинающих
изучение языка.


 Веб-ресурсы

 На официальном веб-сайте проекта Python (http://www.python.org) вы
найдете ссылки на различные ресурсы, посвященные этому языку
программирования, часть которых охватывает специализированные темы
и области применения языка. Щелкнув на ссылке Documentation
(Документация), можно получить доступ к электронному учебнику
и к руководству «Beginners Guide to Python» (руководство по языку Python
для начинающих). На сайте также имеются ссылки на другие ресурсы
на других языках.

 Массу информации о языке Python можно отыскать в интернет-энциклопедии,
в блогах, на веб-сайтах и других ресурсах в Сети. Чтобы получить
перечень ссылок на такие ресурсы, попробуйте поискать по строке
«Python programming» в поисковой системе Google.


 Печатные издания

 Последний источник информации – это огромная коллекция печатных
справочных пособий по языку Python. Однако учтите, что обычно книги
немного отстают от развития языка Python, частично из-за того,
что для написания книги необходимо время, частично из-за естественных
задержек, свойственных самому процессу издания. Обычно книга выходит
в свет с отставанием на три или более месяцев от текущего состояния дел.
В отличие от стандартных руководств, книги редко распространяются
бесплатно.

 Однако для многих удобство и качество профессионального издания
с лихвой окупает потраченные деньги. Более того, язык Python изменяется
настолько медленно, что книги сохраняют свою актуальность в течение
еще нескольких лет после их издания, особенно если их авторы публикуют
дополнения в Сети. Ссылки на другие книги о Python вы найдете
в предисловии.
"""
