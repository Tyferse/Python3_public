"""
 Как Python запускает программы


 Когда интерпретатор Python получает от вас команду запустить сценарий,
он выполняет несколько промежуточных действий,
прежде чем ваш программный код начнет «скрипеть колесами».
В частности, сценарий сначала будет скомпилирован в нечто
под названием «байт-код», а затем передан механизму,
известному под названием «виртуальная машина».


 Компиляция в байт-код

 Когда вы запускаете программу, практически незаметно для вас
Python сначала компилирует ваш исходный текст (инструкции в файле)
в формат, известный под названием байт-код.
Компиляция – это просто этап перевода программы, а байт-код –
это низкоуровневое, платформонезависимое представление
исходного текста программы. Интерпретатор Python транслирует
каждую исходную инструкцию в группы инструкций байт-кода, разбивая ее
на отдельные составляющие. Такая трансляция в байт-код производится
для повышения скорости – байт-код выполняется намного быстрее,
чем исходные инструкции в текстовом файле.

 В предыдущем абзаце вы могли заметить фразу – практически незаметно
для вас. Если интерпретатор Python на вашем компьютере обладает правом
записи, он будет сохранять байт-код вашей программы в виде файла
с расширением .pyc (.pyc – это компилированный исходный файл .py).
Вы будете обнаруживать эти файлы после запуска программ
по соседству с файлами, содержащими исходные тексты
(то есть в том же каталоге).

 Интерпретатор сохраняет байт-код для ускорения запуска программ.
В следующий раз, когда вы попробуете запустить свою программу,
Python загрузит файл .pyc и минует этап компиляции – при условии,
что исходный текст программы не изменялся
с момента последней компиляции. Чтобы определить,
необходимо ли выполнять перекомпиляцию, Python автоматически сравнит
время последнего изменения файла с исходным текстом
и файла с байт-кодом. Если исходный текст сохранялся на диск
после компиляции, при следующем его запуске интерпретатор
автоматически выполнит повторную компиляцию программы.

 Если интерпретатор окажется не в состоянии записать файл
с байт-кодом на диск, программа от этого не пострадает,
просто байт-код будет сгенерирован в памяти и исчезнет
по завершении программы.1 Однако поскольку файлы .pyc повышают скорость
запуска программы, вам может потребоваться иметь возможность
сохранять их, особенно для больших программ. Кроме того,
файлы с байт-кодом – это еще один из способов распространения программ
на языке Python. Интерпретатор запустит файл .pyc,
даже если нет оригинальных файлов с исходными текстами.


Виртуальная машина Python (PVM)

 Как только программа будет скомпилирована в байт-код
(или байт-код будет загружен из существующих файлов .pyc),
он передается механизму под названием виртуальная машина Python
(PVM – для любителей аббревиатур). Аббревиатура PVM
выглядит более внушительно, чем то, что за ней стоит на самом деле, –
это не отдельная программа, которую требуется устанавливать.
Фактически PVM – это просто большой цикл,
который выполняет перебор инструкций в байт-коде, одну за одной,
и выполняет соответствующие им операции. PVM – это механизм
времени выполнения, она всегда присутствует в составе системы Python
и это тот самый программный компонент, который выполняет ваши сценарии.
Формально – это последняя составляющая того,
что называют «интерпретатором Python».

 Компиляция в байт-код производится автоматически,
а PVM – это всего лишь часть системы Python,
которую вы установили на свой компьютер. Повторю еще раз,
что программисты просто создают программный код на языке Python
и запускают файлы с инструкциями.


 CPython

 Оригинальная и стандартная реализация языка Python обычно называется
CPython, особенно когда необходимо подчеркнуть ее отличие от двух других
альтернатив. Это название происходит из того факта,
что реализация написана на переносимом языке ANSI C.
Это тот самый Python, который вы загружаете
с сайта http://www.python.org, получаете в составе дистрибутива
ActivePython и который присутствует в большинстве систем Linux
и Mac OS X. Если вы обнаружили у себя предварительно установленную
версию Python, то более чем вероятно это будет CPython, – при условии,
что ваша компания не использует какую-то специфическую версию.

 Если вы не предполагаете создавать приложения на Java или для платформы
.NET, возможно, вам следует отдать предпочтение стандартной реализации
CPython. Поскольку это эталонная реализация языка, она, как правило,
работает быстрее, устойчивее и лучше, чем альтернативные системы.


 Jython

 Интерпретатор Jython (первоначальное название – JPython) –
это альтернативная реализация языка Python, основная цель которой –
тесная интеграция с языком программирования Java. Реализация Jython
состоит из Java-классов, которые выполняют компиляцию программного кода
на языке Python в байт-код Java и затем передают полученный байт-код
виртуальной машине Java (Java Virtual Machine, JVM).
Программист помещает инструкции на языке Python в текстовые файлы,
как обычно, а система Jython подменяет два этапа
на эквиваленты языка Java.

 Цель Jython состоит в том, чтобы позволить программам на языке Python
управлять Java-приложениями, точно так же как CPython может управлять
компонентами на языках C и C++. Эта реализация имеет бесшовную
интеграцию с Java. Поскольку программный код на языке Python
транслируется в байт-код Java, во время выполнения он ведет себя
точно так же, как настоящая программа на языке Java.
Сценарии на языке Jython могут выступать в качестве апплетов
и сервлетов, создавать графический интерфейс с использованием
механизмов Java и так далее. Более того, Jython обеспечивает поддержку
возможности импортировать и использовать Java-классы
в программном коде Python. Тем не менее поскольку реализация Jython
обеспечивает более низкую скорость выполнения и менее устойчива
по сравнению с CPython, она представляет интерес скорее для
разработчиков программ на языке Java, которым необходим язык сценариев
в качестве интерфейса к Java-коду.


 IronPython

 Третья (и к моменту написания этих строк самая новая)
реализация языка Python – это IronPython. Она предназначена
для обеспечения интеграции программ Python с приложениями,
созданными для работы в среде Microsoft .NET Framework
операционной системы Windows, а также в Mono – открытом эквиваленте
для операционной системы Linux. Платформа .NET и среда выполнения
языка C# предназначены для обеспечения взаимодействий
между программными объектами – независимо от используемого
языка программирования, в духе более ранней модели COM
компании Microsoft. Реализация IronPython позволяет программам
на языке Python играть роль как клиентских, так и серверных компонентов,
доступных из других языков программирования .NET.

 Модель реализации IronPython очень напоминает Jython
(и фактически разрабатывается одним и тем же автором) –
она подменяет два этапа на эквиваленты среды .NET. Кроме того,
как и Jython, основной интерес IronPython представляет
для разработчиков, которым необходима интеграция Python
с компонентами .NET. Поскольку разработка ведется компанией Microsoft,
от IronPython, кроме всего прочего, можно было бы ожидать
существенной оптимизации производительности.


 Динамический компилятор Psyco

 Система Psyco – это не другая реализация языка Python, а компонент,
расширяющий модель выполнения байт-кода, что позволяет программам
выполняться быстрее. В терминах схемы на рис. 2.2 Psyco –
это расширение PVM, которое собирает и использует информацию о типах,
чтобы транслировать части байт-кода программы
в истинный двоичный машинный код, который выполняется гораздо быстрее.
Для такой трансляции не требуется вносить изменения
в исходный программный код или производить дополнительную компиляцию
в ходе разработки.

 Грубо говоря, во время выполнения программы Psyco собирает информацию
о типах объектов и затем эта информация используется для генерации
высокоэффективного машинного кода, оптимизированного для объектов этого
типа. После этого произведенный машинный код замещает соответствующие
участки байт-кода и тем самым увеличивает скорость выполнения программы.
В результате при использовании Psyco существенно уменьшается общее время
выполнения программы. В идеале некоторые участки программного кода
под управлением Psyco могут выполняться так же быстро,
как скомпилированный код языка C.

 Поскольку эта компиляция из байт-кода производится
во время выполнения программы, обычно Psyco называют динамическим
(just-in-time, JIT) компилятором. Однако в действительности Psyco
немного отличается от JIT-компиляторов, которые, возможно,
некоторые читатели видели в языке Java. В действительности Psyco –
это специализированный JIT-компилятор; он генерирует машинный код,
оптимизированный для типов данных, которые фактически используются
в программе. Например, если один и тот же участок программы использует
различные типы данных в разное время, Psyco может генерировать
различные версии машинного кода для поддержки каждой из комбинаций.

 Применение Psyco показывает существенное увеличение скорости
выполнения программного кода Python. Согласно информации,
которая приводится на домашней странице проекта, Psyco обеспечивает
увеличение скорости «от 2 до 100 раз, обычно в 4 раза,
при использовании немодифицированного интерпретатора Python,
неизменного исходного текста, всего лишь за счет использования
динамически загружаемого модуля расширения на языке C».
При прочих равных условиях наибольший прирост скорости
наблюдается для программного кода, реализующего различные алгоритмы
на чистом языке Python, – именно такой программный код обычно переносят
на язык C с целью оптимизации. При использовании Psyco необходимость
в таком переносе теряет свою остроту.

 Пожалуй, самым большим недостатком Psyco является то обстоятельство,
что в настоящее время он способен генерировать машинный код
только для архитектуры Intel x86, впрочем, на этой архитектуре
работают такие операционные системы, как Windows, Linux и даже Mac.


 Транслятор Shedskin C++

 Shedskin – это еще одна система, которая реализует
нетрадиционный подход к выполнению программ на языке Python.
Она преобразует исходный код на языке Python в исходный код
на языке C++, который затем может быть скомпилирован в машинный код.
Кроме того, эта система реализует платформонезависимый подход
к выполнению программного кода Python.


 Фиксированные двоичные файлы

 Иногда, когда пользователи спрашивают про «настоящий» компилятор языка
Python, в действительности они просто ищут способ создавать
из своих программ на языке Python самостоятельные исполняемые файлы.
Это необходимо скорее для упаковки и распространения программ,
чем для их исполнения, но эти две стороны взаимосвязаны между собой.
При помощи инструментов сторонних разработчиков,
которые можно загрузить из Сети, вы можете превратить свои программы
на языке Python в настоящие исполняемые файлы,
которые в мире Python известны как фиксированные двоичные файлы
(frozen binaries).

 Фиксированные двоичные файлы объединяют в единый файл пакета байт-код
программ, PVM (интерпретатор) и файлы поддержки, необходимые программам.
Существуют разные реализации такого подхода, но в конечном результате
получается единственный исполняемый файл (например, файл
с расширением .exe в Windows), который легко можно передать заказчику.
Такую модель можно представить, если объединить байт-код и PVM
в единый компонент – фиксированный двоичный файл.

 На сегодняшний день существует три основных инструмента создания
фиксированных двоичных файлов: py2exe (для Windows), PyInstaller
(напоминает py2exe, но также работает в Linux и UNIX
и способен производить самоустанавливающиеся исполняемые файлы)
и freeze (оригинальная версия). Вам придется загружать эти инструменты
отдельно от Python, но они распространяются совершенно бесплатно.
Чтобы дать вам общее представление об области применения
этих инструментов, замечу, что py2exe может создавать
автономные программы, использующие библиотеки tkinter, PMW, wxPython
и PyGTK для создания графического интерфейса; программы,
использующие инструментальные средства создания игр pygame;
клиентские программы win32com и многие другие.

 Фиксированные двоичные файлы – это не то же самое, что получается
в результате работы настоящего компилятора, потому что они выполняют
байт-код с помощью виртуальной машины. Следовательно,
программы в фиксированных двоичных файлах исполняются
с той же скоростью, что и обычные файлы с исходными текстами программ,
разве что улучшен способ их запуска. Фиксированные двоичные файлы
имеют немалый размер (они содержат в себе PVM), но по современным меркам
их все же нельзя назвать необычно большими. Так как интерпретатор Python
встроен непосредственно в фиксированные двоичные файлы,
его установка не является обязательным требованием для запуска программ
на принимающей стороне. Более того, поскольку программ ный код упакован
в фиксированный двоичный файл, он надежно скрыт от получателя.

 Такая схема упаковки программ в единственный файл особенно подходит
для нужд разработчиков коммерческого программного обеспечения.
Например, программа с графическим интерфейсом на базе tkinter
может быть упакована в исполняемый файл и распространяться
как самостоятельная программа на CD или через Интернет.
Конечному пользователю не нужно будет устанавливать Python
(и даже знать о том, что это такое), чтобы запустить
распространяемую программу.


 Другие способы выполнения

 Существуют также другие схемы выполнения программ на языке Python,
преследующие узкоспециализированные цели:
  Система Stackless Python – это разновидность стандартной реализации
 CPython, которая не использует стек вызовов языка. Она упрощает перенос
 Python на архитектуры с небольшим объемом стека, обеспечивает
 дополнительные возможности параллельной обработки данных и поощряет
 использование новейших инструментов языка, таких как сопрограммы.

  Система Cython (расширенная версия проекта Pyrex) – это гибридный
 язык, дополняющий язык Python возможностью вызывать функции на языке C
 и использовать объявления типов переменных, аргументов и атрибутов
 классов на языке C. Исходные тексты на языке Cython могут быть
 скомпилированы в программный код на языке C, использующий Python/C API,
 который в свою очередь может быть скомпилирован в машинный код.
 Несмотря на то, что получающийся программный код не полностью совместим
 со стандартным языком Python, Cython может оказаться как
 полезным инструментом для создания оберток вокруг внешних библиотек на
 языке C, так и эффективным средством разработки расширений на C для
 языка Python.
"""
